{"version":3,"sources":["app/playersStore.ts","Player.ts","controls/FactionSelect.tsx","controls/LanguageSelector.tsx","controls/Pages/MainPage.tsx","controls/CustomInput.tsx","controls/Pages/PlayerScoreCounterPage.tsx","controls/Pages/PlayersListPage.tsx","controls/Pages/SummaryPage.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["playersSlice","createSlice","name","initialState","players","reducers","addPlayer","state","action","foundPlayer","find","player","faction","payload","indexOf","push","updatePlayer","reset","actions","PlayerFaction","color","emblemUrl","shortName","toLowerCase","Polania","Saxony","Crimea","Nord","Rusvet","Albion","Togawa","Tesla","Fenris","BaseFactions","InvadersFactions","FenrisFactions","Player","other","popularity","money","stars","hex","resources","bonus","total","calculateTotal","starsModifier","Math","min","floor","hexModifier","resourcesModifier","this","FactionSelect","props","getByName","filter","p","length","prevProps","setState","className","mra","src","window","location","origin","alt","to","id","React","connect","ownProps","LanguageSelector","htmlFor","onChange","e","setActiveLanguage","target","value","localStorage","setItem","activeLanguage","code","languages","map","lng","Component","withLocalize","MainPage","onClick","style","marginLeft","CustomInput","onKeyUp","ev","key","form","currentTarget","index","Array","prototype","call","elements","focus","preventDefault","icon","flexGrow","type","pattern","inputMode","changeHandler","textAlign","label","PlayerScoreCounterPage","s","_","goToSummary","history","match","params","onSubmit","readOnly","large","waves","marginRight","PlayersListPage","nameInputRef","names","Name","current","Faction","GetRandomFaction","factionsToChoose","some","randomizedList","i","sort","random","console","log","width","height","ref","onKeyPress","event","AddPlayerToList","SummaryPage","a","b","App","getItem","initialize","options","renderToStaticMarkup","defaultLanguage","addTranslationForLanguage","en","ru","basename","process","path","exact","component","store","configureStore","reducer","playersReducer","localize","localizeReducer","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61da2f86.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Player } from \"../Player\";\r\n\r\nexport interface PlayersState {\r\n  players: Player[];\r\n}\r\n\r\nconst initialState: PlayersState = {\r\n  players: [],\r\n};\r\n\r\nexport const playersSlice = createSlice({\r\n  name: \"players\",\r\n  initialState,\r\n  reducers: {\r\n    addPlayer: (state, action: PayloadAction<Player>) => {\r\n      var foundPlayer = state.players.find(player => player.faction === action.payload.faction);\r\n      if (foundPlayer)\r\n        state.players[state.players.indexOf(foundPlayer)] = action.payload;\r\n      else\r\n        state.players.push(action.payload);\r\n    },\r\n    updatePlayer: (state, action: PayloadAction<Player>) => {\r\n      state.players[state.players.indexOf(action.payload)] = action.payload;\r\n    },\r\n    reset: (state) => {\r\n      state.players = [];\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addPlayer, updatePlayer, reset } = playersSlice.actions;\r\n\r\nexport default playersSlice.reducer;\r\n","export class PlayerFaction {\r\n  public name: string = \"\";\r\n  public color: string = \"\";\r\n  public emblemUrl: string = \"\";\r\n  public shortName: string = \"\";\r\n\r\n  public static getByName(name: string): PlayerFaction {\r\n    switch (name?.toLowerCase()) {\r\n      case \"polania\":\r\n        return PlayerFaction.Polania;\r\n      case \"saxony\":\r\n        return PlayerFaction.Saxony;\r\n      case \"crimea\":\r\n        return PlayerFaction.Crimea;\r\n      case \"nord\":\r\n        return PlayerFaction.Nord;\r\n      case \"rusvet\":\r\n        return PlayerFaction.Rusvet;\r\n      case \"albion\":\r\n        return PlayerFaction.Albion;\r\n      case \"togawa\":\r\n        return PlayerFaction.Togawa;\r\n      case \"tesla\":\r\n        return PlayerFaction.Tesla;\r\n      case \"fenris\":\r\n        return PlayerFaction.Fenris;\r\n      default:\r\n        return PlayerFaction.Polania;\r\n    }\r\n  }\r\n\r\n  public static Polania: PlayerFaction = {\r\n    name: \"Republic of Polania\",\r\n    color: \"white\",\r\n    emblemUrl: \"/icons/factions/polania.png\",\r\n    shortName: \"polania\",\r\n  };\r\n  public static Saxony: PlayerFaction = {\r\n    name: \"Saxony Empire\",\r\n    color: \"black\",\r\n    emblemUrl: \"/icons/factions/saxony.png\",\r\n    shortName: \"saxony\",\r\n  };\r\n  public static Crimea: PlayerFaction = {\r\n    name: \"Crimean Khanate\",\r\n    color: \"yellow\",\r\n    emblemUrl: \"/icons/factions/crimea.png\",\r\n    shortName: \"crimea\",\r\n  };\r\n  public static Nord: PlayerFaction = {\r\n    name: \"Nordic Kingdoms\",\r\n    color: \"blue\",\r\n    emblemUrl: \"/icons/factions/nord.png\",\r\n    shortName: \"nord\",\r\n  };\r\n  public static Rusvet: PlayerFaction = {\r\n    name: \"Rusviet Union\",\r\n    color: \"red\",\r\n    emblemUrl: \"/icons/factions/rusvet.png\",\r\n    shortName: \"rusvet\",\r\n  };\r\n  public static Albion: PlayerFaction = {\r\n    name: \"Clan Albion\",\r\n    color: \"green\",\r\n    emblemUrl: \"/icons/factions/albion.png\",\r\n    shortName: \"albion\",\r\n  };\r\n  public static Togawa: PlayerFaction = {\r\n    name: \"Togawa Shogunate\",\r\n    color: \"purple\",\r\n    emblemUrl: \"/icons/factions/togawa.png\",\r\n    shortName: \"togawa\",\r\n  };\r\n  public static Tesla: PlayerFaction = {\r\n    name: \"Vesna Tesla \",\r\n    color: \"light-blue\",\r\n    emblemUrl: \"/icons/factions/tesla.webp\",\r\n    shortName: \"tesla\",\r\n  };\r\n  public static Fenris: PlayerFaction = {\r\n    name: \"Fenris\",\r\n    color: \"orange\",\r\n    emblemUrl: \"/icons/factions/fenris.webp\",\r\n    shortName: \"fenris\",\r\n  };\r\n\r\n  public static BaseFactions: PlayerFaction[] = [PlayerFaction.Polania, PlayerFaction.Saxony, PlayerFaction.Crimea, PlayerFaction.Nord,PlayerFaction.Rusvet]\r\n  public static InvadersFactions: PlayerFaction[] = [PlayerFaction.Albion, PlayerFaction.Togawa]\r\n  public static FenrisFactions: PlayerFaction[] = [PlayerFaction.Tesla, PlayerFaction.Fenris]\r\n\r\n  private constructor() {}\r\n}\r\n\r\nexport class Player {\r\n  public popularity: number = 0;\r\n  public money: number = 0;\r\n  public stars: number = 0;\r\n  public hex: number = 0;\r\n  public resources: number = 0;\r\n  public bonus: number = 0;\r\n  public total: number = 0;\r\n  public name: string = \"\";\r\n  public faction: PlayerFaction = PlayerFaction.Polania;\r\n\r\n  public constructor(other: any) {\r\n    if (other) {\r\n      this.popularity = other.popularity ?? 0;\r\n      this.money = other.money ?? 0;\r\n      this.stars = other.stars ?? 0;\r\n      this.hex = other.hex ?? 0;\r\n      this.resources = other.resources ?? 0;\r\n      this.bonus = other.bonus ?? 0;\r\n      this.name = other.name ?? \"\";\r\n      this.faction = other.faction ?? PlayerFaction.Polania;\r\n    }\r\n  }\r\n\r\n  public calculateTotal = (): number => {\r\n    const starsModifier: number = Math.min(\r\n      5,\r\n      Math.floor(this.popularity / 6.5) + 3\r\n    ); //0-6 = 3; 6-12 = 4; 13-18 = 5;\r\n    const hexModifier: number = Math.min(\r\n      4,\r\n      Math.floor(this.popularity / 6.5) + 2\r\n    ); //0-6 = 2; 6-12 = 3; 13-18 = 4;\r\n    const resourcesModifier: number = Math.min(\r\n      3,\r\n      Math.floor(this.popularity / 6.5 + 1)\r\n    ); //0-6 = 1; 6-12 = 2; 13-18 = 3;\r\n\r\n    const total = Math.floor(\r\n      this.money +\r\n        this.stars * starsModifier +\r\n        this.hex * hexModifier +\r\n        Math.floor(this.resources / 2) * resourcesModifier +\r\n        this.bonus\r\n    );\r\n    this.total = total;\r\n    return total;\r\n  };\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Player, PlayerFaction } from \"../Player\";\r\nimport { RootState } from \"../app/store\";\r\nimport { playersSlice } from \"../app/playersStore\";\r\nimport { Translate } from \"react-localize-redux\";\r\n\r\ninterface IFactionSelectProps {\r\n  faction: string;\r\n  mra?: boolean | undefined;\r\n}\r\n\r\ninterface IFactionSelectState {\r\n  player: Player | null;\r\n}\r\n\r\ntype FactionSelectProps = IFactionSelectProps &\r\n  typeof playersSlice.actions & {\r\n    players: Player[];\r\n  };\r\n\r\nclass FactionSelect extends React.Component<\r\n  FactionSelectProps,\r\n  IFactionSelectState\r\n> {\r\n  private faction: PlayerFaction;\r\n  constructor(props: FactionSelectProps) {\r\n    super(props);\r\n    this.faction = PlayerFaction.getByName(props.faction);\r\n    const player = this.props.players.filter(\r\n      (p) => p.faction.shortName === this.faction.shortName\r\n    );\r\n    this.state = {\r\n      player: player.length > 0 ? player[0] : null,\r\n    };\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: FactionSelectProps) {\r\n    if (prevProps.players !== this.props.players) {\r\n      const players = this.props.players.filter(\r\n        (p) => p.faction.shortName === this.faction.shortName\r\n      );\r\n      this.setState({ player: players.length > 0 ? players[0] : null });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className={\"col s6 m4 l2\" + (this.props.mra ? \" mra\" : \"\")}>\r\n        <div className=\"card\">\r\n          <div className=\"card-image\">\r\n            <img\r\n              src={\r\n                window.location.origin +\r\n                  \"/scythecounter\" +\r\n                  this.faction?.emblemUrl ?? \"\"\r\n              }\r\n              alt=\"faction badge\"\r\n            />\r\n          </div>\r\n          <div className=\"card-action\">\r\n            <NavLink to={\"player/\" + this.props.faction}>\r\n              {this.state.player ? (\r\n                <span>{this.state.player.name}</span>\r\n              ) : (\r\n                  <Translate id=\"selectButton\" />\r\n              )}\r\n            </NavLink>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState, ownProps: IFactionSelectProps) => ({\r\n  players: state.players.players,\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  playersSlice.actions\r\n)(FactionSelect as any);\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  LocalizeContextProps,\r\n  Translate,\r\n  withLocalize,\r\n} from \"react-localize-redux\";\r\nimport { Select } from \"react-materialize\";\r\n\r\nclass LanguageSelector extends Component<LocalizeContextProps> {\r\n  render() {\r\n    return (\r\n      <>\r\n        <label htmlFor=\"languageSelector\">\r\n          <Translate id=\"selectLanguageLabel\" />\r\n        </label>\r\n        <Select\r\n          onChange={(e) => {\r\n            this.props.setActiveLanguage(e.target.value);\r\n            localStorage.setItem(\"language\", e.target.value);\r\n          }}\r\n          value={this.props.activeLanguage && this.props.activeLanguage.code}\r\n          id=\"languageSelector\"\r\n        >\r\n          {this.props.languages?.map((lng) => (\r\n            <option value={lng.code} key={lng.code}>\r\n              {lng.name}\r\n            </option>\r\n          ))}\r\n        </Select>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default withLocalize(LanguageSelector);\r\n","import * as React from \"react\";\r\nimport { Translate } from \"react-localize-redux\";\r\nimport { Button } from \"react-materialize\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { playersSlice } from \"../../app/playersStore\";\r\nimport FactionSelect from \"../FactionSelect\";\r\nimport LanguageSelector from \"../LanguageSelector\";\r\n\r\ntype MainPageProps = typeof playersSlice.actions;\r\n\r\nclass MainPage extends React.Component<MainPageProps> {\r\n  public constructor(props: MainPageProps) {\r\n    super(props);\r\n  }\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <LanguageSelector />\r\n        </div>\r\n        <div className=\"contentContainer\">\r\n          <div className=\"row factionRow\">\r\n            <FactionSelect faction=\"polania\" />\r\n            <FactionSelect faction=\"saxony\" />\r\n            <FactionSelect faction=\"crimea\" />\r\n            <FactionSelect faction=\"rusvet\" />\r\n            <FactionSelect faction=\"nord\" mra />\r\n          </div>\r\n          <div className=\"row factionRow\">\r\n            <FactionSelect faction=\"albion\" mra />\r\n            <FactionSelect faction=\"togawa\" mra />\r\n            <FactionSelect faction=\"tesla\" mra />\r\n            <FactionSelect faction=\"fenris\" mra />\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button\r\n              onClick={() => {\r\n                this.props.reset();\r\n              }}\r\n            >\r\n              <Translate id=\"resetButton\" />\r\n            </Button>\r\n            <NavLink\r\n              to=\"/summary\"\r\n              className=\"btn\"\r\n              style={{ marginLeft: \"10px\" }}\r\n            >\r\n              <Translate id=\"summaryButton\" />\r\n            </NavLink>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { ...playersSlice.actions })(MainPage as any);\r\n","import React from \"react\";\r\nimport { Translate } from \"react-localize-redux\";\r\n\r\ninterface numericInputProps {\r\n  value: number | string;\r\n  changeHandler(event: React.ChangeEvent<HTMLInputElement>): void;\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n}\r\n\r\nexport default class CustomInput extends React.Component<numericInputProps> {\r\n  private onKeyUp = (ev: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (ev.key === \"Enter\") {\r\n      const form = ev.currentTarget.form!;\r\n      const index = Array.prototype.indexOf.call(form, ev.currentTarget);\r\n      (form.elements[index + 1] as HTMLInputElement)?.focus();\r\n      ev.preventDefault();\r\n    }\r\n  };\r\n  public render() {\r\n    return (\r\n      <div className=\"valueRow\">\r\n        <img src={this.props.icon} alt={this.props.name} />\r\n        <div\r\n          className=\"input-field col s12 pointsInput\"\r\n          style={{ flexGrow: 1 }}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            name={this.props.name}\r\n            id={this.props.name}\r\n            {...(typeof this.props.value === \"number\" && {\r\n              pattern: \"[0-9]*\",\r\n              inputMode: \"numeric\",\r\n            })}\r\n            value={this.props.value}\r\n            onChange={this.props.changeHandler}\r\n            onKeyUp={this.onKeyUp}\r\n            style={{ textAlign: \"center\" }}\r\n          />\r\n          <span className=\"helper-text\">\r\n            <Translate id={this.props.label} />\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { ReactNode } from \"react\";\r\nimport { Translate } from \"react-localize-redux\";\r\nimport { Button } from \"react-materialize\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { playersSlice } from \"../../app/playersStore\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { Player, PlayerFaction } from \"../../Player\";\r\nimport CustomInput from \"../CustomInput\";\r\n\r\ntype PlayerScoreCounterProps = {\r\n  players: Player[],\r\n  player: Player | null;\r\n} & RouteComponentProps<string[]> &\r\n  typeof playersSlice.actions;\r\n\r\ninterface IPlayerScoreCounterState {\r\n  player: Player;\r\n}\r\n\r\nclass PlayerScoreCounterPage extends React.Component<\r\n  PlayerScoreCounterProps,\r\n  IPlayerScoreCounterState\r\n> {\r\n  public constructor(props: PlayerScoreCounterProps) {\r\n    super(props);\r\n    this.state = {\r\n      player:\r\n        props.players.find(player => player.faction === PlayerFaction.getByName(props.match.params[0])) ??\r\n        new Player({\r\n          faction: PlayerFaction.getByName(props.match.params[0]),\r\n        }),\r\n    };\r\n  }\r\n\r\n  private changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState((s, _) => {\r\n      const value: number | string =\r\n        e.target.name === \"name\" ? e.target.value : +e.target.value;\r\n      const player: Player = new Player({\r\n        ...s.player,\r\n        [e.target.name]: value,\r\n      });\r\n      player.calculateTotal();\r\n      return { player };\r\n    });\r\n  };\r\n\r\n  private addPlayer = (goToSummary: boolean = false) => {\r\n    if (this.state.player.name.length > 0)\r\n      this.props.addPlayer(this.state.player);\r\n    this.props.history.push(goToSummary ? \"/summary\" : \"/\");\r\n  };\r\n\r\n  public render(): ReactNode {\r\n    return (\r\n      <div className=\"PlayerScoreCounter contentContainer\">\r\n        <form onSubmit={(e) => e.preventDefault()}>\r\n          <h1 style={{ textAlign: \"center\" }}>\r\n            <Translate id={this.state.player.faction.shortName + \"Faction\"} />\r\n          </h1>\r\n          <CustomInput\r\n            name=\"name\"\r\n            label=\"nameLabel\"\r\n            icon={window.location.origin + \"/scythecounter\" + \"/icons/name.png\"}\r\n            value={this.state.player.name}\r\n            changeHandler={this.changeHandler}\r\n          />\r\n          <CustomInput\r\n            name=\"popularity\"\r\n            label=\"popularityLabel\"\r\n            icon={\r\n              window.location.origin + \"/scythecounter\" + \"/icons/heart.png\"\r\n            }\r\n            value={this.state.player.popularity}\r\n            changeHandler={this.changeHandler}\r\n          />\r\n          <CustomInput\r\n            name=\"money\"\r\n            label=\"moneyLabel\"\r\n            icon={window.location.origin + \"/scythecounter\" + \"/icons/coin.png\"}\r\n            value={this.state.player.money}\r\n            changeHandler={this.changeHandler}\r\n          />\r\n          <CustomInput\r\n            name=\"stars\"\r\n            label=\"starsLabel\"\r\n            icon={window.location.origin + \"/scythecounter\" + \"/icons/star.png\"}\r\n            value={this.state.player.stars}\r\n            changeHandler={this.changeHandler}\r\n          />\r\n          <CustomInput\r\n            name=\"hex\"\r\n            label=\"hexLabel\"\r\n            icon={window.location.origin + \"/scythecounter\" + \"/icons/hex.png\"}\r\n            value={this.state.player.hex}\r\n            changeHandler={this.changeHandler}\r\n          />\r\n          <CustomInput\r\n            name=\"resources\"\r\n            label=\"resourcesLabel\"\r\n            icon={\r\n              window.location.origin + \"/scythecounter\" + \"/icons/resource.png\"\r\n            }\r\n            value={this.state.player.resources}\r\n            changeHandler={this.changeHandler}\r\n          />\r\n          <CustomInput\r\n            name=\"bonus\"\r\n            label=\"bonusLabel\"\r\n            icon={window.location.origin + \"/scythecounter\" + \"/icons/coin.png\"}\r\n            value={this.state.player.bonus}\r\n            changeHandler={this.changeHandler}\r\n          />\r\n          <div className=\"resultRow\">\r\n            <label htmlFor=\"total\">\r\n              <Translate id=\"totalLabel\" />\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"total\"\r\n              id=\"total\"\r\n              readOnly\r\n              value={this.state.player.total}\r\n              style={{ textAlign: \"center\" }}\r\n            />\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button\r\n              className=\"brown lighten-3\"\r\n              large\r\n              waves=\"teal\"\r\n              onClick={() => {\r\n                this.addPlayer(true);\r\n              }}\r\n              style={{ marginRight: \"2rem\" }}\r\n            >\r\n              <Translate id=\"finishButton\" />\r\n            </Button>\r\n            <Button\r\n              className=\"brown lighten-3\"\r\n              large\r\n              waves=\"teal\"\r\n              onClick={() => {\r\n                this.addPlayer();\r\n              }}\r\n            >\r\n              <Translate id=\"nextPlayerButton\" />\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState, ownProps: PlayerScoreCounterProps) => ({\r\n  players: state.players.players,\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  playersSlice.actions\r\n)(PlayerScoreCounterPage as any);\r\n","import { randomInt } from \"crypto\";\r\nimport * as React from \"react\";\r\nimport { Translate } from \"react-localize-redux\";\r\nimport { Button, TextInput } from \"react-materialize\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { playersSlice } from \"../../app/playersStore\";\r\nimport { PlayerFaction } from \"../../Player\";\r\nimport FactionSelect from \"../FactionSelect\";\r\nimport LanguageSelector from \"../LanguageSelector\";\r\n\r\ntype PlayersListPageProps = typeof playersSlice.actions;\r\n\r\ninterface IPlayerScoreCounterState {\r\n    names: { Name: string, Faction: PlayerFaction }[];\r\n }\r\n\r\nclass PlayersListPage extends React.Component<PlayersListPageProps, IPlayerScoreCounterState> {\r\n\r\n  private nameInputRef: any;\r\n\r\n  public constructor(props: PlayersListPageProps) {\r\n    super(props);\r\n    this.state = {names: []}\r\n    this.nameInputRef = React.createRef();\r\n  }\r\n\r\n  private AddPlayerToList() {\r\n    this.setState({ names: [...this.state.names, {Name: this.nameInputRef.current.value, Faction: this.GetRandomFaction() }] });\r\n    this.nameInputRef.current.value = \"\";\r\n    this.nameInputRef.current.focus();\r\n  }\r\n\r\n  private GetRandomFaction(): PlayerFaction {\r\n    var factionsToChoose = [...PlayerFaction.BaseFactions, ...PlayerFaction.InvadersFactions]\r\n      .filter(faction => !this.state.names.some(player => player.Faction === faction));\r\n    var randomizedList:PlayerFaction[] = [];\r\n    for(let i = 0; i < 100; ++i)\r\n      randomizedList = [...randomizedList, ...factionsToChoose];\r\n    randomizedList.sort(() => Math.random() - 0.5);\r\n    console.log(factionsToChoose);\r\n    console.log(randomizedList);\r\n    var random = Math.floor(Math.random() * (randomizedList.length - 1));\r\n    console.log(random);\r\n    return randomizedList[random];\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <LanguageSelector />\r\n        </div>\r\n        <div className=\"contentContainer\">\r\n              {this.state.names.map((player) => (\r\n                <div key={player.Name} className=\"valign-wrapper row\">\r\n                    <img width={64} height={64} src={window.location.origin + \"/scythecounter\" + player.Faction.emblemUrl} alt={player.Faction.name}/>\r\n                    {player.Name}\r\n                </div>\r\n              ))}\r\n          <input ref={this.nameInputRef} type=\"text\" onKeyPress={(event) => { if (event.key === \"Enter\") this.AddPlayerToList(); }}/>\r\n          <Button className=\"center-align\" onClick={() => this.AddPlayerToList()}>Add</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { ...playersSlice.actions })(PlayersListPage as any);\r\n","import { connect } from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport { Player } from \"../../Player\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { Button } from \"react-materialize\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Translate } from \"react-localize-redux\";\r\ntype SummaryPageProps = {\r\n  players: Player[];\r\n} & RouteComponentProps;\r\n\r\nclass SummaryPage extends React.Component<SummaryPageProps> {\r\n  public render() {\r\n    return (\r\n      <div className=\"contentContainer\">\r\n        <table className=\"summaryTable\">\r\n          <thead>\r\n            <tr>\r\n              <td>\r\n                <Translate id=\"faction\" />\r\n              </td>\r\n              <td>\r\n                <img\r\n                  src={\r\n                    window.location.origin +\r\n                    \"/scythecounter\" +\r\n                    \"/icons/name.png\"\r\n                  }\r\n                  alt=\"name\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <img\r\n                  src={\r\n                    window.location.origin +\r\n                    \"/scythecounter\" +\r\n                    \"/icons/heart.png\"\r\n                  }\r\n                  alt=\"heart\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <img\r\n                  src={\r\n                    window.location.origin +\r\n                    \"/scythecounter\" +\r\n                    \"/icons/coin.png\"\r\n                  }\r\n                  alt=\"coin\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <img\r\n                  src={\r\n                    window.location.origin +\r\n                    \"/scythecounter\" +\r\n                    \"/icons/star.png\"\r\n                  }\r\n                  alt=\"star\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <img\r\n                  src={\r\n                    window.location.origin + \"/scythecounter\" + \"/icons/hex.png\"\r\n                  }\r\n                  alt=\"hex\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <img\r\n                  src={\r\n                    window.location.origin +\r\n                    \"/scythecounter\" +\r\n                    \"/icons/resource.png\"\r\n                  }\r\n                  alt=\"resource\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <img\r\n                  src={\r\n                    window.location.origin +\r\n                    \"/scythecounter\" +\r\n                    \"/icons/coin.png\"\r\n                  }\r\n                  alt=\"bonus\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <Translate id=\"totalLabel\" />\r\n              </td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.players\r\n              .map((p) => p)\r\n              .sort((a, b) => b.total - a.total)\r\n              .map((p: Player, i: number) => (\r\n                <tr\r\n                  key={p.name + p.faction.name}\r\n                  {...(i === 0 && { className: \"winner\" })}\r\n                >\r\n                  <td>\r\n                    <div className=\"summaryFactionCell\">\r\n                      <img\r\n                        src={\r\n                          window.location.origin +\r\n                          \"/scythecounter\" +\r\n                          p.faction.emblemUrl\r\n                        }\r\n                        alt=\"faction badge\"\r\n                      />\r\n                      <Translate id={p.faction.shortName + \"Faction\"} />\r\n                    </div>\r\n                  </td>\r\n                  <td>{p.name}</td>\r\n                  <td>{p.popularity}</td>\r\n                  <td>{p.money}</td>\r\n                  <td>{p.stars}</td>\r\n                  <td>{p.hex}</td>\r\n                  <td>{p.resources}</td>\r\n                  <td>{p.bonus}</td>\r\n                  <td>{p.total}</td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        <Button\r\n          onClick={() => {\r\n            this.props.history.push(\"/\");\r\n          }}\r\n        >\r\n          <Translate id=\"goBackButton\" />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  players: state.players.players,\r\n});\r\n\r\nexport default connect(mapStateToProps)(SummaryPage as any);\r\n","import React, { ReactNode } from \"react\";\r\nimport { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { LocalizeContextProps, withLocalize } from \"react-localize-redux\";\r\nimport { Route, Switch, HashRouter } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport MainPage from \"./controls/Pages/MainPage\";\r\nimport PlayerScoreCounterPage from \"./controls/Pages/PlayerScoreCounterPage\";\r\nimport PlayersListPage from \"./controls/Pages/PlayersListPage\";\r\nimport SummaryPage from \"./controls/Pages/SummaryPage\";\r\n\r\nimport en from \"./localization/en.json\";\r\nimport ru from \"./localization/ru.json\";\r\n\r\nclass App extends React.Component<LocalizeContextProps> {\r\n  public constructor(props: LocalizeContextProps) {\r\n    console.log('v0.1');\r\n    super(props);\r\n    const lng = localStorage.getItem(\"language\") ?? \"en\";\r\n    props.initialize({\r\n      languages: [\r\n        { name: \"English\", code: \"en\" },\r\n        { name: \"Русский\", code: \"ru\" },\r\n      ],\r\n      options: { renderToStaticMarkup, defaultLanguage: lng },\r\n    });\r\n    props.addTranslationForLanguage(en, \"en\");\r\n    props.addTranslationForLanguage(ru, \"ru\");\r\n    if (lng) props.setActiveLanguage(lng);\r\n  }\r\n  public render(): ReactNode {\r\n    return (\r\n      <HashRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={MainPage} />\r\n          <Route path=\"/list\" exact component={PlayersListPage} />\r\n          <Route path=\"/summary\" exact component={SummaryPage} />\r\n          <Route path=\"/player/*\" component={PlayerScoreCounterPage} />\r\n        </Switch>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withLocalize(App);\r\n","import { Action, configureStore, ThunkAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n  Action as LocalizeAction,\r\n  localizeReducer,\r\n  LocalizeState,\r\n} from \"react-localize-redux\";\r\nimport playersReducer, { PlayersState } from \"./playersStore\";\r\n\r\ntype reducer = {\r\n  players: PlayersState;\r\n  localize: LocalizeState;\r\n};\r\n\r\nexport const store = configureStore<reducer, LocalizeAction>({\r\n  reducer: {\r\n    players: playersReducer,\r\n    localize: localizeReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"materialize-css/dist/css/materialize.css\";\r\nimport \"materialize-css/dist/js/materialize\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { LocalizeProvider } from \"react-localize-redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App\";\r\nimport { store } from \"./app/store\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <LocalizeProvider store={store}>\r\n        <App />\r\n      </LocalizeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}